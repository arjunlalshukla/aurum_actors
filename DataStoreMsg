impl aurum::core::HasInterface<DataStoreMsg> for DataStoreMsg {}
impl<Unified> aurum::core::SpecificInterface<Unified> for DataStoreMsg
where
    Unified: std::cmp::Eq + std::fmt::Debug + aurum::core::Case<DataStoreMsg>,
{
    fn deserialize_as(
        item: Unified,
        bytes: Vec<u8>,
    ) -> std::result::Result<Self, aurum::core::DeserializeError<Unified>> {
        //
        if <Unified as aurum::core::Case<DataStoreMsg>>::VARIANT == item {
            aurum::core::deserialize::<Unified, DataStoreMsg, DataStoreMsg>(item, bytes)
        } else
        //
        {
            std::result::Result::Err(aurum::core::DeserializeError::IncompatibleInterface(item))
        }
    }
}
